import { ethers, ignition } from "hardhat";
import VRFModule from "../ignition/modules/VRFModule";
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { VRFMock, VRFv2Consumer } from "../typechain-types";

describe('VRF tests', async function () {

    async function deployVrf() {
        const { mock, consumer } = await ignition.deploy(VRFModule);
        const [ owner, ...others ] = await ethers.getSigners();

        const typedMock = mock as unknown as VRFMock;
        const typedConsumer = consumer as unknown as VRFv2Consumer;

        return { mock: typedMock, consumer: typedConsumer, owner, others };
    }

    it('vrf is generating a random number', async () => {
        const { mock, consumer, owner } = await loadFixture(deployVrf);

        const tx = await consumer.connect(owner).requestRandomWords();
        await expect(tx)
            .to.emit(mock, 'RandomWordsRequested');
        const receipt = await tx.wait();

        const requestId = await consumer.s_requestId();
        await mock.fulfillRandomWords(requestId, consumer);

        const randomWord = await consumer.s_randomWords(0);

        console.log('random number generated by vrf: ', randomWord);

        expect(randomWord).to.be.a('bigint');
    });
});